// DateTimeType.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
#include <iostream>
#include <windows.h>
#include <string>
#include <iomanip>
#include <sstream>
#include <ctime>
#include <algorithm>
#include <fstream>

using namespace std;

//                  Variant - 2
/*
         Тип данных – дата и время
    Базовый уровень Задание: изучить набор функций, предназначенных для работы с данными типа дата и время. Написать программу реализации
    индивидуального задания, представленного в таблице. Все указанные значения дат и времени вводить по формату ДДММГГГГ и ЧЧ:ММ:СС соответственно
*/


void low()
{
    /*
1. Ввести две даты и вывести сообщение с информацией, какая из двух введенных дат более 
поздняя. 
2. Написать программу контроля электропитания ноутбука. Исходные параметры: время 
включения ноутбука от батареи и задекларированное производителем время работы от батареи в 
часах без подключения к сети электропитания. Программа информирует о количестве часов работы 
ноутбука от батареи на текущий момент времени и сколько осталось минут до полного разряда 
батареи. При расчете считать, что в момент включения ноутбука батарея имела 100% заряд и 
способна обеспечить задекларированное производителем время работы
    */
    cout << "\nTask low: \n";
    std::string s1{ "19.01.2038" }, s2{ "26.05.1970" }; // даты начиная с 1970 года до 19.01.2038 года

    std::stringstream ss1, ss2;
    ss1.str(s1);
    ss2.str(s2);
    std::tm stm1{}, stm2{};
    ss1 >> std::get_time(&stm1, "%d.%m.%Y");
    ss2 >> std::get_time(&stm2, "%d.%m.%Y");
    stm1.tm_isdst = -1;
    stm2.tm_isdst = -1;
    std::cout << stm1.tm_mday << '.' << stm1.tm_mon << '.' << stm1.tm_year << std::endl;
    std::cout << stm2.tm_mday << '.' << stm2.tm_mon << '.' << stm2.tm_year << std::endl;
    time_t t1 = std::mktime(&stm1);
    time_t t2 = std::mktime(&stm2);
    if (t1 != -1 && t2 != -1)
    {
        double dif = std::difftime(t1, t2);
        std::cout << (dif < 0. ? "first" : dif > 0. ? "second" : "equal") << std::endl;
    }
    else
    {
        std::cerr << "Error\n";
    }
    cout << "\nНажмите <Enter> чтобы продолжить: ";
    while (getchar() != '\n')
        continue;
}
void midle()
{
    /*
   Структура и ее поля:
            Сотрудники предприятия:
               - табельный номер;
               - ФИО сотрудника;
               - дата рождения;
               - пол (м/ж); 
               - дата поступления на работу;
               - должность; 
               - оклад;
    Задача:
          - вывести информацию о возрасте каждого сотрудника на данный момент времени и количестве дней, отработанных
            им на предприятии; 
          - организовать просмотр информации о сотрудниках пенсионного возраста (мужчины – до 60 
              лет, женщины – до 55 лет), проработавших на предприятии более 30 лет. 
    */
    cout << "\nMidel task level: \n";

    cout << "\nНажмите <Enter> чтобы продолжить: ";
    while (getchar() != '\n')
        continue;
}
void hard()
{
/*
        - ввести две даты и подсчитать для указанного периода количество сотрудников, поступивших на работу и их 
          средний оклад;
        - вывести информацию о самом молодом инженере и количестве дней отработанных им на предприятии;
        - расчетному отделу для начисления премии подготовить информацию по всем юбилярам текущего года (возраст 
          кратен 5). Результат оформить в виде файла.
 */
    cout << "\nHard task level: \n";

    cout << "\nНажмите <Enter> чтобы продолжить: ";
    while (getchar() != '\n')
        continue;
}

int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
    srand(time(NULL));
   //  low();
  //   midle();
 //    hard();
}

